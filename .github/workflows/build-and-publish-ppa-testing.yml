name: Build and Publish mdllama DEB and RPM (testing branch) 

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Git ref (optional)'
        required: false
      release_tag:
        description: 'Release tag (optional)'
        required: false

permissions:
  contents: write

jobs:
  clean-testing-repos:
    runs-on: ubuntu-latest
    outputs:
      working-branch: ${{ steps.create-branch.outputs.working-branch }}
    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          persist-credentials: true
          path: gh-pages-content

      - name: Checkout main branch for source files
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          path: main-content

      - name: Remove debian-testing and fedora-testing
        run: |
          cd gh-pages-content
          rm -rf debian-testing fedora-testing

      - name: Create and push 'working' branch with removals (do not modify gh-pages)
        id: create-branch
        run: |
          # Configure git author so commit is attributed
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create a unique working branch name to avoid conflicts
          WORKING_BRANCH="working-testing-$(date +%s)-${{ github.run_id }}"
          
          # Start with main branch content (which has the build scripts)
          cd main-content
          git checkout -b "$WORKING_BRANCH"
          
          # Copy the cleaned gh-pages content over (without the removed directories)
          rsync -av ../gh-pages-content/ ./ --exclude='.git'
          
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ci: merge main branch with cleaned gh-pages content"
            git push --set-upstream origin "$WORKING_BRANCH"
          fi
          
          # Set the output for other jobs to use
          echo "working-branch=$WORKING_BRANCH" >> $GITHUB_OUTPUT

  build-deb-testing:
    needs: clean-testing-repos
    runs-on: Debian
    timeout-minutes: 10  # Fails if job doesn't start/finish in 10 minutes
    steps:
      - name: Checkout working branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.clean-testing-repos.outputs.working-branch }}

      - name: Clean up old packages before build
        run: |
          rm -rf repo/

      - name: Run build-mdllama-deb-testing.sh
        run: |
          chmod +x ./build-mdllama-deb-testing.sh
          ./build-mdllama-deb-testing.sh

      - name: Upload debian repo artifact (testing)
        uses: actions/upload-artifact@v4
        id: upload-deb-testing
        with:
          name: debian-repo-testing
          path: repo/**

  build-rpm-testing:
    needs: clean-testing-repos
    runs-on: Fedora
    timeout-minutes: 10  # Fails if job doesn't start/finish in 10 minutes
    steps:
      - name: Checkout working branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.clean-testing-repos.outputs.working-branch }}

      - name: Clean up old packages before build
        run: |
          rm -rf rpm-out/

      - name: Run build-mdllama-rpm-testing.sh
        run: |
          chmod +x ./build-mdllama-rpm-testing.sh
          ./build-mdllama-rpm-testing.sh

      - name: Upload fedora rpm artifact (testing)
        uses: actions/upload-artifact@v4
        id: upload-rpm-testing
        with:
          name: fedora-rpm-testing
          path: rpm-out/**

  deploy-testing:
    runs-on: ubuntu-latest
    needs: [build-deb-testing, build-rpm-testing]
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Download debian repo artifact (testing)
        uses: actions/download-artifact@v4
        with:
          name: debian-repo-testing
          path: debian-testing/

      - name: Download fedora rpm artifact (testing)
        uses: actions/download-artifact@v4
        with:
          name: fedora-rpm-testing
          path: fedora-testing/

      - name: Merge with existing gh-pages content
        run: |
          # Clone existing gh-pages branch
          git clone --branch gh-pages --single-branch https://${{ secrets.GITHUB_TOKEN }}@github.com/QinCai-rui/packages.git existing-gh-pages || echo "No existing gh-pages branch"
          
          # Clone working branch to get the cleaned state
          WORKING_BRANCH="${{ needs.clean-testing-repos.outputs.working-branch }}"
          if [ -n "$WORKING_BRANCH" ]; then
            git clone --branch "$WORKING_BRANCH" --single-branch https://${{ secrets.GITHUB_TOKEN }}@github.com/QinCai-rui/packages.git working-branch || echo "No working branch found"
          fi
          
          # Start with working branch content (which has removals applied)
          if [ -d "working-branch" ]; then
            rsync -av working-branch/ ./ --exclude='.git'
          fi
          
          # Merge back any other directories from gh-pages that weren't removed
          if [ -d "existing-gh-pages" ]; then
            # Copy back non-target directories from gh-pages
            for dir in existing-gh-pages/*/; do
              dirname=$(basename "$dir")
              if [ "$dirname" != "debian-testing" ] && [ "$dirname" != "fedora-testing" ]; then
                rsync -av "$dir" "./"
              fi
            done
          fi
          
          # Remove the cloned directories so they don't get deployed
          rm -rf existing-gh-pages working-branch

      - name: List all published packages (testing)
        run: |
          echo "DEB packages:" && find debian/ -name '*.deb' 2>/dev/null || echo "No debian packages"
          echo "DEB testing packages:" && find debian-testing/ -name '*.deb' 2>/dev/null || echo "No debian-testing packages"
          echo "RPM packages:" && find fedora/ -name '*.rpm' 2>/dev/null || echo "No fedora packages"
          echo "RPM testing packages:" && find fedora-testing/ -name '*.rpm' 2>/dev/null || echo "No fedora-testing packages"

      - name: Clean up extra files before deploy (testing)
        run: |
          rm -f LICENSE
          find . -maxdepth 2 -name '*.sh' -exec rm -f {} +

      - name: Deploy to gh-pages (debian/, debian-testing/, fedora/, fedora-testing/)
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./
          publish_branch: gh-pages
          cname: packages.qincai.xyz

      - name: Clean up temporary working branch
        if: always()
        run: |
          WORKING_BRANCH="${{ needs.clean-testing-repos.outputs.working-branch }}"
          if [ -n "$WORKING_BRANCH" ]; then
            git push origin --delete "$WORKING_BRANCH" || echo "Working branch already cleaned up or doesn't exist"
          fi
